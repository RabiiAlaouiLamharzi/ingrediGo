/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNFastMlkitTranslateTextSpec symbols
#ifndef RNFastMlkitTranslateTextSpec_H
#define RNFastMlkitTranslateTextSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeFastMlkitTranslateText {
    struct SpecPrepareOptions {
      NSString *source() const;
      NSString *target() const;
      std::optional<bool> downloadIfNeeded() const;

      SpecPrepareOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeFastMlkitTranslateText_SpecPrepareOptions)
+ (RCTManagedPointer *)JS_NativeFastMlkitTranslateText_SpecPrepareOptions:(id)json;
@end
@protocol NativeFastMlkitTranslateTextSpec <RCTBridgeModule, RCTTurboModule>

- (void)prepare:(JS::NativeFastMlkitTranslateText::SpecPrepareOptions &)options
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)translate:(NSString *)text
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)getDownloadedLanguageModels:(RCTPromiseResolveBlock)resolve
                             reject:(RCTPromiseRejectBlock)reject;
- (void)deleteLanguageModel:(NSString *)lang
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (void)downloadLanguageModel:(NSString *)lang
                      resolve:(RCTPromiseResolveBlock)resolve
                       reject:(RCTPromiseRejectBlock)reject;
- (void)isLanguageDownloaded:(NSString *)lang
                     resolve:(RCTPromiseResolveBlock)resolve
                      reject:(RCTPromiseRejectBlock)reject;
- (void)setIdentifyConfidence:(double)confidence;
- (void)identify:(NSString *)text
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)identifyPossible:(NSString *)text
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeFastMlkitTranslateTextSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeFastMlkitTranslateText'
   */
  class JSI_EXPORT NativeFastMlkitTranslateTextSpecJSI : public ObjCTurboModule {
  public:
    NativeFastMlkitTranslateTextSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeFastMlkitTranslateText::SpecPrepareOptions::source() const
{
  id const p = _v[@"source"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeFastMlkitTranslateText::SpecPrepareOptions::target() const
{
  id const p = _v[@"target"];
  return RCTBridgingToString(p);
}
inline std::optional<bool> JS::NativeFastMlkitTranslateText::SpecPrepareOptions::downloadIfNeeded() const
{
  id const p = _v[@"downloadIfNeeded"];
  return RCTBridgingToOptionalBool(p);
}
#endif // RNFastMlkitTranslateTextSpec_H
