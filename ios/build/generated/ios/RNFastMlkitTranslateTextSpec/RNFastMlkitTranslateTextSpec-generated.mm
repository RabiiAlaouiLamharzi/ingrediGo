/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNFastMlkitTranslateTextSpec.h"


@implementation NativeFastMlkitTranslateTextSpecBase


- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeFastMlkitTranslateText_SpecPrepareOptions)
+ (RCTManagedPointer *)JS_NativeFastMlkitTranslateText_SpecPrepareOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeFastMlkitTranslateText::SpecPrepareOptions>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_prepare(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "prepare", @selector(prepare:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_translate(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "translate", @selector(translate:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_getDownloadedLanguageModels(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getDownloadedLanguageModels", @selector(getDownloadedLanguageModels:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_deleteLanguageModel(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "deleteLanguageModel", @selector(deleteLanguageModel:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_downloadLanguageModel(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "downloadLanguageModel", @selector(downloadLanguageModel:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_isLanguageDownloaded(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "isLanguageDownloaded", @selector(isLanguageDownloaded:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_setIdentifyConfidence(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "setIdentifyConfidence", @selector(setIdentifyConfidence:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_identify(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "identify", @selector(identify:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeFastMlkitTranslateTextSpecJSI_identifyPossible(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "identifyPossible", @selector(identifyPossible:resolve:reject:), args, count);
    }

  NativeFastMlkitTranslateTextSpecJSI::NativeFastMlkitTranslateTextSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["prepare"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_prepare};
        setMethodArgConversionSelector(@"prepare", 0, @"JS_NativeFastMlkitTranslateText_SpecPrepareOptions:");
        
        methodMap_["translate"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_translate};
        
        
        methodMap_["getDownloadedLanguageModels"] = MethodMetadata {0, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_getDownloadedLanguageModels};
        
        
        methodMap_["deleteLanguageModel"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_deleteLanguageModel};
        
        
        methodMap_["downloadLanguageModel"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_downloadLanguageModel};
        
        
        methodMap_["isLanguageDownloaded"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_isLanguageDownloaded};
        
        
        methodMap_["setIdentifyConfidence"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_setIdentifyConfidence};
        
        
        methodMap_["identify"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_identify};
        
        
        methodMap_["identifyPossible"] = MethodMetadata {1, __hostFunction_NativeFastMlkitTranslateTextSpecJSI_identifyPossible};
        
  }
} // namespace facebook::react
