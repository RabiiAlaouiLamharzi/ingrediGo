/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeFastMlkitTranslateTextCxxSpecJSI : public TurboModule {
protected:
  NativeFastMlkitTranslateTextCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value prepare(jsi::Runtime &rt, jsi::Object options) = 0;
  virtual jsi::Value translate(jsi::Runtime &rt, jsi::String text) = 0;
  virtual jsi::Value getDownloadedLanguageModels(jsi::Runtime &rt) = 0;
  virtual jsi::Value deleteLanguageModel(jsi::Runtime &rt, jsi::String lang) = 0;
  virtual jsi::Value downloadLanguageModel(jsi::Runtime &rt, jsi::String lang) = 0;
  virtual jsi::Value isLanguageDownloaded(jsi::Runtime &rt, jsi::String lang) = 0;
  virtual void setIdentifyConfidence(jsi::Runtime &rt, double confidence) = 0;
  virtual jsi::Value identify(jsi::Runtime &rt, jsi::String text) = 0;
  virtual jsi::Value identifyPossible(jsi::Runtime &rt, jsi::String text) = 0;

};

template <typename T>
class JSI_EXPORT NativeFastMlkitTranslateTextCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "FastMlkitTranslateText";

protected:
  NativeFastMlkitTranslateTextCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeFastMlkitTranslateTextCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeFastMlkitTranslateTextCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeFastMlkitTranslateTextCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value prepare(jsi::Runtime &rt, jsi::Object options) override {
      static_assert(
          bridging::getParameterCount(&T::prepare) == 2,
          "Expected prepare(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::prepare, jsInvoker_, instance_, std::move(options));
    }
    jsi::Value translate(jsi::Runtime &rt, jsi::String text) override {
      static_assert(
          bridging::getParameterCount(&T::translate) == 2,
          "Expected translate(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::translate, jsInvoker_, instance_, std::move(text));
    }
    jsi::Value getDownloadedLanguageModels(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getDownloadedLanguageModels) == 1,
          "Expected getDownloadedLanguageModels(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getDownloadedLanguageModels, jsInvoker_, instance_);
    }
    jsi::Value deleteLanguageModel(jsi::Runtime &rt, jsi::String lang) override {
      static_assert(
          bridging::getParameterCount(&T::deleteLanguageModel) == 2,
          "Expected deleteLanguageModel(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::deleteLanguageModel, jsInvoker_, instance_, std::move(lang));
    }
    jsi::Value downloadLanguageModel(jsi::Runtime &rt, jsi::String lang) override {
      static_assert(
          bridging::getParameterCount(&T::downloadLanguageModel) == 2,
          "Expected downloadLanguageModel(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::downloadLanguageModel, jsInvoker_, instance_, std::move(lang));
    }
    jsi::Value isLanguageDownloaded(jsi::Runtime &rt, jsi::String lang) override {
      static_assert(
          bridging::getParameterCount(&T::isLanguageDownloaded) == 2,
          "Expected isLanguageDownloaded(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::isLanguageDownloaded, jsInvoker_, instance_, std::move(lang));
    }
    void setIdentifyConfidence(jsi::Runtime &rt, double confidence) override {
      static_assert(
          bridging::getParameterCount(&T::setIdentifyConfidence) == 2,
          "Expected setIdentifyConfidence(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setIdentifyConfidence, jsInvoker_, instance_, std::move(confidence));
    }
    jsi::Value identify(jsi::Runtime &rt, jsi::String text) override {
      static_assert(
          bridging::getParameterCount(&T::identify) == 2,
          "Expected identify(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::identify, jsInvoker_, instance_, std::move(text));
    }
    jsi::Value identifyPossible(jsi::Runtime &rt, jsi::String text) override {
      static_assert(
          bridging::getParameterCount(&T::identifyPossible) == 2,
          "Expected identifyPossible(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::identifyPossible, jsInvoker_, instance_, std::move(text));
    }

  private:
    friend class NativeFastMlkitTranslateTextCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
